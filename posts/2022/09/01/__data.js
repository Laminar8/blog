window.__sveltekit_data = (function(a,b){return {type:b,nodes:[null,{type:b,data:{lastUpdate:"2022\u002F09\u002F22",status:["Published"],codeHighlight:{json:[{fileName:"cloudwatch.json",body:"{\n    \"Records\": [\n        {\n            \"EventSource\": \"aws:sns\",\n            \"EventVersion\": \"1.0\",\n            \"EventSubscriptionArn\": \"arn:aws:sns:ap-southeast-1:123456789012:laminar:a6ea4892-f3e6-499c-a854-f53f544eef04\",\n            \"Sns\": {\n                \"Type\": \"Notification\",\n                \"MessageId\": \"57977499-a9d2-5e38-8b55-2f1bed8777af\",\n                \"TopicArn\": \"arn:aws:sns:ap-southeast-1:123456789012:laminar\",\n                \"Subject\": \"OK: \"my-alarm\" in Asia Pacific (Singapore)\",\n                \"Message\": \"{\"AlarmName\":\"my-alarm\",\"AlarmDescription\":null,\"AWSAccountId\":\"123456789012\",\"AlarmConfigurationUpdatedTimestamp\":\"2022-08-26T03:45:34.563+0000\",\"NewStateValue\":\"OK\",\"NewStateReason\":\"Threshold Crossed: 1 out of the last 1 datapoints [3.6266666666666665 (26\u002F08\u002F22 03:40:00)] was not less than the threshold (1.0) (minimum 1 datapoint for ALARM -\u003E OK transition).\",\"StateChangeTime\":\"2022-08-26T03:46:29.897+0000\",\"Region\":\"Asia Pacific (Singapore)\",\"AlarmArn\":\"arn:aws:cloudwatch:ap-southeast-1:123456789012:alarm:my-alarm\",\"OldStateValue\":\"ALARM\",\"OKActions\":[\"arn:aws:sns:ap-southeast-1:123456789012:laminar\"],\"AlarmActions\":[\"arn:aws:sns:ap-southeast-1:123456789012:laminar\"],\"InsufficientDataActions\":[],\"Trigger\":{\"MetricName\":\"CPUUtilization\",\"Namespace\":\"AWS\u002FRDS\",\"StatisticType\":\"Statistic\",\"Statistic\":\"AVERAGE\",\"Unit\":null,\"Dimensions\":[{\"value\":\"database-1\",\"name\":\"DBInstanceIdentifier\"}],\"Period\":300,\"EvaluationPeriods\":1,\"DatapointsToAlarm\":1,\"ComparisonOperator\":\"LessThanThreshold\",\"Threshold\":1.0,\"TreatMissingData\":\"missing\",\"EvaluateLowSampleCountPercentile\":\"\"}}\",\n                \"Timestamp\": \"2022-08-26T03:46:29.953Z\",\n            }\n        }\n    ]\n}"}],python:[{fileName:"lambda_function.py",body:"from datetime import datetime\nimport module.slack as slack\n\ndef lambda_handler(event, context):\n    message = True\n\n    try:\n        sns = event[\"Records\"][0][\"Sns\"]\n    except Exception as error:\n        # Debug errors\n        print(error)\n\n        # Give a notification to an administrator\n        sns = {\n            \"Subject\": \"Fail to parse a coming sns event.\",\n            \"Timestamp\": datetime.now(),\n        }\n\n        # Change message value to False\n        message = False\n\n    finally:\n        slack.post(sns, message)"},{fileName:"slack.py",body:"import os\nimport json\nimport requests\nfrom datetime import datetime, timezone, timedelta\n\n# Slack\n# Get from https:\u002F\u002Fapi.slack.com\u002Fapps\ntoken = os.environ[\"token\"]\nchannel_id = os.environ[\"channel_id\"]\n\nmethod = \"POST\"\nheaders = {\"Content-Type\": \"application\u002Fjson\", \"Authorization\": f\"Bearer {token}\"}\nurl = \"https:\u002F\u002Fslack.com\u002Fapi\u002Fchat.postMessage\"\n\n# Unnecessary cloudwatch alarms\ncloudwatch_keys = [\n    \"AWSAccountId\",\n    \"AlarmConfigurationUpdatedTimestamp\",\n    \"OKActions\",\n    \"AlarmActions\",\n    \"InsufficientDataActions\",\n    \"AlarmArn\",\n]\nrds_keys = [\"Identifier Link\", \"Source ARN\"]\n\ndef create_message(sns, msg=True):\n    if msg:\n        message = json.loads(sns[\"Message\"])\n\n        if len(message.keys()) \u003E= 10:\n            message_block = [\n                {\n                    \"type\": \"divider\",\n                },\n                {\n                    \"type\": \"section\",\n                    \"fields\": [\n{\"type\": \"mrkdwn\", \"text\": f\"*{k}:*\\n\u003E{message[k]}\\n\"}\nfor k in list(message.keys())[:10]\nif k not in cloudwatch_keys + rds_keys\n                    ],\n                },\n            ]\n        else:\n            message_block = [\n                {\n                    \"type\": \"divider\",\n                },\n                {\n                    \"type\": \"section\",\n                    \"fields\": [\n{\"type\": \"mrkdwn\", \"text\": f\"*{k}:*\\n\u003E{message[k]}\\n\"}\nfor k in message.keys()\nif k not in cloudwatch_keys + rds_keys\n                    ],\n                },\n            ]\n    else:\n        message_block = []\n    \n    return json.dumps(\n        {\n            \"channel\": channel_id,\n            \"text\": f\"{sns['Subject']} \\n\",\n            \"blocks\": [\n                {\n                    \"type\": \"header\",\n                    \"text\": {\"type\": \"plain_text\", \"text\": sns[\"Subject\"]},\n                },\n            ]\n            + message_block,\n        }\n    )\n        \ndef post(sns, msg):\n    data = create_message(sns, msg)\n    response = requests.request(method, url, headers=headers, data=data)\n    output = response.json()\n\n    return output\n"}],bash:[{fileName:"Bash",body:"pip install requests -t ."}]}},uses:{dependencies:a,params:a,parent:a,url:a}}]}}(void 0,"data"))